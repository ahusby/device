@startuml component

actor developer as "Developer"
participant device as "NAIS Device"
participant dnca as "NAIS Device Client Agent"
participant aad as "Azure Active Directory"
participant kolide as "Kolide"
participant nds as "NAIS Device Server"
database ndsdb as "NDS database"
collections vpnserver as "VPN Server"
collections ndga as "NAIS Device Gateway Agent"

==Enroll==
developer -> dnca: enroll device
dnca -> device: install kolide-agent
device -> kolide: register
dnca -> aad: login
aad -> dnca: token
dnca -> device: get serial
device -> dnca: serial
dnca -> nds: HTTP POST /register {token, serial}
nds -> aad: validate token
nds -> ndsdb: add db entry {serial, email}
nds -> dnca: response

==Kolide==
loop
    device -> kolide: fetch queries
    kolide -> device: queries
    device -> device: run queries
    device -> kolide: results
end

==Monitor device statuses==
loop every x minutes
   nds -> kolide: get device statuses
   kolide -> nds: device statuses
   nds -> nds: update database entries with status
end

==Connect to VPN==
dnca -> nds: HTTP GET /psk {token, public key, serial}
nds -> nds: validate token
nds -> ndsdb: is device ok?

nds -> ndsdb: get {psk, ip, routes, server-configs}
nds -> dnca: {psk, ip, routes, server-configs}

dnca -> device: ip dev add / ifconfig add / netsh add device
dnca -> device: wg set psk, private key, ip
dnca -> device: route add

==Enroll VPN Server==
ndga -> aad: login
aad -> ndga: token
ndga -> nds: HTTP POST /gateway/register {token, server-id, public ip}
nds -> nds: validate token
nds -> ndsdb: write server config
nds -> ndga: response

==Rotate psks==
loop every x minutes:
    nds -> nds: generate new psks
    nds -> ndsdb: write new psks
end

==Configure VPN Server (runs every minute or more)==
loop every minute
    ndga -> aad: login
    aad -> ndga: token
    ndga -> nds: HTTP GET /peers {token, server-id}
    nds -> nds: validate token
    nds -> ndsdb: get peers
    nds -> ndga: {peers}
end

loop every peer
    ndga -> ndga: configure peer {public key, ip, psk}
    ndga -> ndga: configure route {peer ip}
end

@enduml
